<!DOCTYPE html>
<html lang="ru" id="html">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Погода</title>
    <link href="https://fonts.googleapis.com/css?family=Roboto&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            text-align: center;
            margin: 0;
            padding: 0;
            background-color: #e3f2fd; /* Светлый фон по умолчанию */
            color: #333;
            transition: background-color 0.5s; /* Плавный переход фона */
        }
        #current-time {
            position: fixed;
            top: 20px; 
            right: 20px; 
            background-color: rgba(0, 0, 0, 0.7); 
            color: white; 
            padding: 10px;
            border-radius: 5px; 
            z-index: 1000; 
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.5); 
        }
        .weather {
            min-height: 100vh;
            display: flex;
            align-items: center; 
            justify-content: center; 
            padding: 20px;
            flex-direction: column; /* Вертикальное расположение */
        }
        .weather__inner {
            width: 600px; /* Фиксированная ширина */
            margin: 0 auto;
            padding: 2em; 
            background: white; 
            border-radius: 10px; 
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1); 
        }
        .current {
            text-align: center;
            margin-bottom: 2em;
        }
        .current__city {
            font-size: 2.5em;
            font-weight: bold; 
            color: #1e88e5; 
        }
        .current__description {
            font-size: 1.2em;
            color: #555; 
        }
        .current__temperature {
            font-size: 3em;
            color: #e64a19; 
        }
        .forecast {
            display: flex; 
            justify-content: space-between;
            margin-bottom: 2em;
        }
        .forecast__item {
            text-align: center;
            background: #f9f9f9; 
            border: 1px solid #ddd; 
            border-radius: 10px; 
            padding: 1em; 
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); 
            transition: transform 0.3s; 
            position: relative; 
            width: 100px; /* Фиксированная ширина для каждого элемента */
        }
        .forecast__item:hover {
            transform: translateY(-5px); 
        }
        .forecast__time {
            color: #1976d2; 
        }
        .forecast__temperature {
            font-size: 1.5em;
            color: #ffb300; 
            margin-top: 10px; 
        }
        .details {
            display: flex; 
            justify-content: space-between;
            margin-bottom: 2em;
        }
        .details__item {
            width: 100px; /* Фиксированная ширина для каждого элемента */
            background: #f9f9f9; 
            border: 1px solid #ddd; 
            border-radius: 10px; 
            padding: 1em; 
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); 
        }
        .details__name {
            margin-bottom: 1em;
            font-weight: bold; 
            color: #333; 
        }
        .details__value {
            font-size: 1.5em;
            color: #4caf50; 
        }
        .temperature-label {
            color: #333; 
            font-size: 1.5em; 
            margin-bottom: 10px; 
        }
        #messageBox {
            margin-top: 10px; 
            font-size: 1.2em; 
            color: #ff5722;
        }
        #cityInput {
            margin-bottom: 20px;
            padding: 10px;
            font-size: 1.2em;
            width: 100%;
            max-width: 300px;
        }
        #fetchButton {
            padding: 10px 20px;
            font-size: 1.2em;
            cursor: pointer;
        }
        /* Отключение адаптивности */
        @media (max-width: 600px) {
            .weather__inner {
                width: 600px; /* Фиксированная ширина для мобильных устройств */
            }
            .forecast__item {
                width: 100px; /* Фиксированная ширина для каждого элемента */
            }
            .details__item {
                width: 100px; /* Фиксированная ширина для каждого элемента */
            }
        }
    </style>
</head>
<body>
    <div id="current-time">Текущее время: --</div>
    <div class="weather"> 
        <div class="weather__inner"> 
            <input type="text" id="cityInput" placeholder="Введите город" />
            <button id="fetchButton">Получить погоду</button>
            <div class="current">
                <div class="current__city">Город: --</div> 
                <div class="current__description">Описание погоды: --</div> 
                <div class="current__temperature" id="currentTemperature"> --˚</div> 
            </div> 
            <div class="forecast"> 
                <div class="forecast__item"> 
                    <div class="forecast__time">День 1</div> 
                    <div class="forecast__temperature"> --˚</div> 
                </div> 
                <div class="forecast__item"> 
                    <div class="forecast__time">День 2</div> 
                    <div class="forecast__temperature"> --˚</div> 
                </div> 
                <div class="forecast__item"> 
                    <div class="forecast__time">День 3</div> 
                    <div class="forecast__temperature"> --˚</div> 
                </div> 
                <div class="forecast__item"> 
                    <div class="forecast__time">День 4</div> 
                    <div class="forecast__temperature"> --˚</div> 
                </div> 
                <div class="forecast__item"> 
                    <div class="forecast__time">День 5</div> 
                    <div class="forecast__temperature"> --˚</div> 
                </div> 
            </div> 
            <div class="details"> 
                <div class="details__item feelslike"> 
                    <div class="details__name">Ощущается как</div> 
                    <div class="details__value" id="feelsLike"> --˚</div> 
                </div> 
                <div class="details__item pressure"> 
                    <div class="details__name">Давление</div> 
                    <div class="details__value" id="pressure"> -- мм. рт. ст.</div> 
                </div> 
                <div class="details__item humidity"> 
                    <div class="details__name">Влажность</div> 
                    <div class="details__value" id="humidity"> -- %</div> 
                </div> 
                <div class="details__item wind"> 
                    <div class="details__name">Ветер</div> 
                    <div class="details__value" id="wind"> -- м/с</div> 
                </div> 
            </div> 
            <h1 class="temperature-label">Текущая температура</h1> 
            <div id="messageBox"></div> 
        </div> 
    </div> 
    <script> 
        function updateWeatherMessage(temperature) {
            const messageBox = document.getElementById('messageBox');
            let message = '';
            if (temperature < 0) { 
                message = 'На улице холодно, одевайтесь потеплее!'; 
            } else if (temperature >= 0 && temperature <= 15) { 
                message = 'На улице прохладно, не забудьте взять куртку.'; 
            } else if (temperature > 15 && temperature <= 25) { 
                message = 'На улице тепло, отличная погода для прогулки!'; 
            } else { 
                message = 'На улице жарко, не забудьте про солнцезащитный крем!'; 
            } 
            messageBox.textContent = message; 
            messageBox.style.display = 'block'; 
        }
        // Функция для обновления текущего времени
        function updateTime() {
            const now = new Date();
            const timeString = now.toLocaleTimeString('ru-RU');
            document.getElementById('current-time').textContent = `Текущее время: ${timeString}`;
        }
        // Функция для обновления фона в зависимости от времени суток
        function updateBackground() {
            const date = new Date();
            const hours = date.getHours();
            const body = document.body;
            if (hours >= 18 || hours < 6) { // Ночь
                body.style.backgroundColor = '#424242'; // Темный фон
                body.style.color = '#fff'; // Светлый текст
            } else { // День
                body.style.backgroundColor = '#e3f2fd'; // Светлый фон
                body.style.color = '#333'; // Темный текст
            }
        }
        // Вызов функции для обновления фона и времени при загрузке страницы
        updateBackground();
        setInterval(updateTime, 1000); // Обновление времени каждую секунду
        const apiKey = '884092c16660effdf19b15a60ba2a405'; 
        async function fetchWeather(city) { 
            try {
                const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}&units=metric&lang=ru`); 
                if (!response.ok) {
                    throw new Error('Сетевая ошибка: ' + response.status);
                }
                const data = await response.json(); 
                // Текущая погода
                const currentTemperature = Math.round(data.list[0].main.temp);
                const feelsLike = Math.round(data.list[0].main.feels_like);
                const pressure = Math.round(data.list[0].main.pressure);
                const humidity = Math.round(data.list[0].main.humidity);
                const windSpeed = Math.round(data.list[0].wind.speed);
                document.querySelector('.current__city').textContent = data.city.name; 
                document.querySelector('.current__description').textContent = data.list[0].weather[0].description; 
                document.getElementById('currentTemperature').textContent = `${currentTemperature}˚`; 
                document.getElementById('feelsLike').textContent = `${feelsLike}˚`;
                document.getElementById('pressure').textContent = `${pressure} мм. рт. ст.`;
                document.getElementById('humidity').textContent = `${humidity} %`;
                document.getElementById('wind').textContent = `${windSpeed} м/с`;
                // Обновляем сообщение о погоде
                updateWeatherMessage(currentTemperature);
                // Обновляем прогноз на 5 дней
                for (let i = 0; i < 5; i++) {
                    const forecastItem = data.list[i * 8]; // Получаем данные на каждый день (8 интервалов по 3 часа)
                    document.querySelectorAll('.forecast__temperature')[i].textContent = `${Math.round(forecastItem.main.temp)}˚`;
                    document.querySelectorAll('.forecast__time')[i].textContent = new Date(forecastItem.dt * 1000).toLocaleDateString('ru-RU', { weekday: 'long' });
                }
            } catch (error) {
                console.error('Ошибка при получении данных о погоде:', error);
                document.querySelector('.current__city').textContent = 'Ошибка загрузки данных';
            }
        } 
        document.getElementById('fetchButton').addEventListener('click', () => {
            const city = document.getElementById('cityInput').value;
            if (city) {
                fetchWeather(city);
            } else {
                alert('Пожалуйста, введите название города.');
            }
        });
        // Изначально загружаем погоду для Москвы
        fetchWeather('Москва'); 
    </script> 
</body> 
</html># Compiled class file
*.class

# Log file
*.log

# BlueJ files
*.ctxt

# Mobile Tools for Java (J2ME)
.mtj.tmp/

# Package Files #
*.jar
*.war
*.nar
*.ear
*.zip
*.tar.gz
*.rar

# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
hs_err_pid*
replay_pid*
